INFO  02:39:04,334 - Compiling source file: C:\Users\Jovan\Desktop\compilers\materijali\Leksicka_analiza\workspace\leksicka\test\program.mj
INFO  02:39:04,704 - #2 program
INFO  02:39:04,705 - #48 test301
INFO  02:39:04,705 - #14 const
INFO  02:39:04,708 - #48 int
INFO  02:39:04,708 - #48 nula
INFO  02:39:04,710 - #6 =
INFO  02:39:04,710 - #51 0
INFO  02:39:04,710 - #8 ;
INFO  02:39:04,712 - #14 const
INFO  02:39:04,714 - #48 int
INFO  02:39:04,715 - #48 jedan
INFO  02:39:04,715 - #6 =
INFO  02:39:04,715 - #51 1
INFO  02:39:04,715 - #8 ;
INFO  02:39:04,716 - #14 const
INFO  02:39:04,716 - #48 int
INFO  02:39:04,716 - #48 pet
INFO  02:39:04,717 - #6 =
INFO  02:39:04,717 - #51 5
INFO  02:39:04,717 - #8 ;
INFO  02:39:04,717 - #48 int
INFO  02:39:04,718 - #48 my
INFO  02:39:04,718 - #8 ;
INFO  02:39:04,721 - #48 int
INFO  02:39:04,723 - #48 your
INFO  02:39:04,723 - #8 ;
INFO  02:39:04,723 - #48 int
INFO  02:39:04,724 - #48 niz
INFO  02:39:04,724 - #38 [
INFO  02:39:04,724 - #39 ]
INFO  02:39:04,724 - #8 ;
INFO  02:39:04,724 - #48 char
INFO  02:39:04,725 - #48 nizch
INFO  02:39:04,725 - #38 [
INFO  02:39:04,725 - #39 ]
INFO  02:39:04,725 - #8 ;
INFO  02:39:04,725 - #48 bool
INFO  02:39:04,726 - #48 smor
INFO  02:39:04,726 - #38 [
INFO  02:39:04,726 - #39 ]
INFO  02:39:04,726 - #8 ;
INFO  02:39:04,726 - #11 {
INFO  02:39:04,727 - #13 void
INFO  02:39:04,727 - #48 main
INFO  02:39:04,728 - #9 (
INFO  02:39:04,730 - #10 )
INFO  02:39:04,732 - #48 int
INFO  02:39:04,733 - #48 bodovi
INFO  02:39:04,734 - #8 ;
INFO  02:39:04,734 - #48 bool
INFO  02:39:04,736 - #48 bt
INFO  02:39:04,736 - #8 ;
INFO  02:39:04,737 - #48 int
INFO  02:39:04,737 - #48 nula
INFO  02:39:04,737 - #8 ;
INFO  02:39:04,737 - #11 {
INFO  02:39:04,737 - #48 nizch
INFO  02:39:04,739 - #6 =
INFO  02:39:04,740 - #21 new
INFO  02:39:04,743 - #48 char
INFO  02:39:04,743 - #38 [
INFO  02:39:04,743 - #51 3
INFO  02:39:04,744 - #39 ]
INFO  02:39:04,745 - #8 ;
INFO  02:39:04,746 - #48 nizch
INFO  02:39:04,746 - #38 [
INFO  02:39:04,747 - #48 jedan
INFO  02:39:04,747 - #39 ]
INFO  02:39:04,747 - #6 =
INFO  02:39:04,748 - #49 b
INFO  02:39:04,748 - #8 ;
INFO  02:39:04,748 - #3 print
INFO  02:39:04,749 - #9 (
INFO  02:39:04,749 - #48 nizch
INFO  02:39:04,749 - #38 [
INFO  02:39:04,749 - #51 1
INFO  02:39:04,749 - #39 ]
INFO  02:39:04,749 - #10 )
INFO  02:39:04,751 - #8 ;
INFO  02:39:04,751 - #12 }
INFO  02:39:04,752 - #12 }
INFO  02:39:04,803 - ProgramWithMethods(
  ProgName(
   test301
  ) [ProgName]
  GlobalVariableDeclaration(
    GlobalVariableDeclaration(
      GlobalVariableDeclaration(
        GlobalVariableDeclaration(
          GlobalVariableDeclaration(
            ConstantDeclaration(
              ConstantDeclaration(
                ConstantDeclaration(
                  EmptyDeclaration(
                  ) [EmptyDeclaration]
                  ConstantDecl(
                    Type(
                     int
                    ) [Type]
                    SimpleConstDecl(
                     nula
                      NumberConstant(
                       0
                      ) [NumberConstant]
                    ) [SimpleConstDecl]
                    LineConstDeclDerived1(
                    ) [LineConstDeclDerived1]
                  ) [ConstantDecl]
                ) [ConstantDeclaration]
                ConstantDecl(
                  Type(
                   int
                  ) [Type]
                  SimpleConstDecl(
                   jedan
                    NumberConstant(
                     1
                    ) [NumberConstant]
                  ) [SimpleConstDecl]
                  LineConstDeclDerived1(
                  ) [LineConstDeclDerived1]
                ) [ConstantDecl]
              ) [ConstantDeclaration]
              ConstantDecl(
                Type(
                 int
                ) [Type]
                SimpleConstDecl(
                 pet
                  NumberConstant(
                   5
                  ) [NumberConstant]
                ) [SimpleConstDecl]
                LineConstDeclDerived1(
                ) [LineConstDeclDerived1]
              ) [ConstantDecl]
            ) [ConstantDeclaration]
            GlobalVariableDecl(
              SingleVariableDecl(
                Type(
                 int
                ) [Type]
               my
                EmptyArrayOperator(
                ) [EmptyArrayOperator]
              ) [SingleVariableDecl]
              EmptyGlobalLineVariableDecl(
              ) [EmptyGlobalLineVariableDecl]
            ) [GlobalVariableDecl]
          ) [GlobalVariableDeclaration]
          GlobalVariableDecl(
            SingleVariableDecl(
              Type(
               int
              ) [Type]
             your
              EmptyArrayOperator(
              ) [EmptyArrayOperator]
            ) [SingleVariableDecl]
            EmptyGlobalLineVariableDecl(
            ) [EmptyGlobalLineVariableDecl]
          ) [GlobalVariableDecl]
        ) [GlobalVariableDeclaration]
        GlobalVariableDecl(
          SingleVariableDecl(
            Type(
             int
            ) [Type]
           niz
            ArrayOperator(
            ) [ArrayOperator]
          ) [SingleVariableDecl]
          EmptyGlobalLineVariableDecl(
          ) [EmptyGlobalLineVariableDecl]
        ) [GlobalVariableDecl]
      ) [GlobalVariableDeclaration]
      GlobalVariableDecl(
        SingleVariableDecl(
          Type(
           char
          ) [Type]
         nizch
          ArrayOperator(
          ) [ArrayOperator]
        ) [SingleVariableDecl]
        EmptyGlobalLineVariableDecl(
        ) [EmptyGlobalLineVariableDecl]
      ) [GlobalVariableDecl]
    ) [GlobalVariableDeclaration]
    GlobalVariableDecl(
      SingleVariableDecl(
        Type(
         bool
        ) [Type]
       smor
        ArrayOperator(
        ) [ArrayOperator]
      ) [SingleVariableDecl]
      EmptyGlobalLineVariableDecl(
      ) [EmptyGlobalLineVariableDecl]
    ) [GlobalVariableDecl]
  ) [GlobalVariableDeclaration]
  OneMethodDeclaration(
    SingleMethodDeclaration(
      SingleMethodName(
        VoidType(
        ) [VoidType]
       main
      ) [SingleMethodName]
      NoFormalParameters(
      ) [NoFormalParameters]
      MultipleVariableDecl(
        MultipleVariableDecl(
          MultipleVariableDecl(
            EmptyVariableDecl(
            ) [EmptyVariableDecl]
            VariableDecl(
              SingleVariableDecl(
                Type(
                 int
                ) [Type]
               bodovi
                EmptyArrayOperator(
                ) [EmptyArrayOperator]
              ) [SingleVariableDecl]
              EmptyLineVariableDecl(
              ) [EmptyLineVariableDecl]
            ) [VariableDecl]
          ) [MultipleVariableDecl]
          VariableDecl(
            SingleVariableDecl(
              Type(
               bool
              ) [Type]
             bt
              EmptyArrayOperator(
              ) [EmptyArrayOperator]
            ) [SingleVariableDecl]
            EmptyLineVariableDecl(
            ) [EmptyLineVariableDecl]
          ) [VariableDecl]
        ) [MultipleVariableDecl]
        VariableDecl(
          SingleVariableDecl(
            Type(
             int
            ) [Type]
           nula
            EmptyArrayOperator(
            ) [EmptyArrayOperator]
          ) [SingleVariableDecl]
          EmptyLineVariableDecl(
          ) [EmptyLineVariableDecl]
        ) [VariableDecl]
      ) [MultipleVariableDecl]
      MultipleStatement(
        MultipleStatement(
          MultipleStatement(
            NoStatement(
            ) [NoStatement]
            OneStatementRed(
              DesignStatement(
                DesignatorStat(
                  DesignatorFullExpresion(
                   nizch
                    EmptyMultipleDesignator(
                    ) [EmptyMultipleDesignator]
                  ) [DesignatorFullExpresion]
                  AssignDesignatorOp(
                    AssignOperation(
                    ) [AssignOperation]
                    AddExptOnly(
                      OneAddExpr(
                        OneTerm(
                          NewTypeFactorExpresion(
                            NewTypeArray(
                              Type(
                               char
                              ) [Type]
                              AddExptOnly(
                                OneAddExpr(
                                  OneTerm(
                                    NumConst(
                                     3
                                    ) [NumConst]
                                  ) [OneTerm]
                                ) [OneAddExpr]
                              ) [AddExptOnly]
                            ) [NewTypeArray]
                          ) [NewTypeFactorExpresion]
                        ) [OneTerm]
                      ) [OneAddExpr]
                    ) [AddExptOnly]
                  ) [AssignDesignatorOp]
                ) [DesignatorStat]
              ) [DesignStatement]
            ) [OneStatementRed]
          ) [MultipleStatement]
          OneStatementRed(
            DesignStatement(
              DesignatorStat(
                DesignatorFullExpresion(
                 nizch
                  DesignatorArray(
                    EmptyMultipleDesignator(
                    ) [EmptyMultipleDesignator]
                    AddExptOnly(
                      OneAddExpr(
                        OneTerm(
                          DesignatorFactorExpresion(
                            DesignatorOnly(
                              DesignatorFullExpresion(
                               jedan
                                EmptyMultipleDesignator(
                                ) [EmptyMultipleDesignator]
                              ) [DesignatorFullExpresion]
                            ) [DesignatorOnly]
                          ) [DesignatorFactorExpresion]
                        ) [OneTerm]
                      ) [OneAddExpr]
                    ) [AddExptOnly]
                  ) [DesignatorArray]
                ) [DesignatorFullExpresion]
                AssignDesignatorOp(
                  AssignOperation(
                  ) [AssignOperation]
                  AddExptOnly(
                    OneAddExpr(
                      OneTerm(
                        CharConst(
                         b
                        ) [CharConst]
                      ) [OneTerm]
                    ) [OneAddExpr]
                  ) [AddExptOnly]
                ) [AssignDesignatorOp]
              ) [DesignatorStat]
            ) [DesignStatement]
          ) [OneStatementRed]
        ) [MultipleStatement]
        OneStatementRed(
          PrintStatement(
            AddExptOnly(
              OneAddExpr(
                OneTerm(
                  DesignatorFactorExpresion(
                    DesignatorOnly(
                      DesignatorFullExpresion(
                       nizch
                        DesignatorArray(
                          EmptyMultipleDesignator(
                          ) [EmptyMultipleDesignator]
                          AddExptOnly(
                            OneAddExpr(
                              OneTerm(
                                NumConst(
                                 1
                                ) [NumConst]
                              ) [OneTerm]
                            ) [OneAddExpr]
                          ) [AddExptOnly]
                        ) [DesignatorArray]
                      ) [DesignatorFullExpresion]
                    ) [DesignatorOnly]
                  ) [DesignatorFactorExpresion]
                ) [OneTerm]
              ) [OneAddExpr]
            ) [AddExptOnly]
            NoNumConsts(
            ) [NoNumConsts]
          ) [PrintStatement]
        ) [OneStatementRed]
      ) [MultipleStatement]
    ) [SingleMethodDeclaration]
  ) [OneMethodDeclaration]
) [ProgramWithMethods]
INFO  02:39:04,804 - ===================================
INFO  02:39:04,850 - Constant: nula with value 0 declared on the line 5
INFO  02:39:04,851 - Constant: jedan with value 1 declared on the line 6
INFO  02:39:04,851 - Constant: pet with value 5 declared on the line 7
INFO  02:39:04,851 - Variable: my with type  1 declared  on the line 8
INFO  02:39:04,851 - Variable: your with type  1 declared  on the line 9
INFO  02:39:04,852 - Variable: niz with type array  1 declared  on the line 11
INFO  02:39:04,852 - Variable: nizch with type array  2 declared  on the line 12
INFO  02:39:04,852 - Variable: smor with type array  5 declared  on the line 13
INFO  02:39:04,852 - Method main with type 0 on the line 15
INFO  02:39:04,853 - Variable: bodovi with type  1 declared  on the line 16
INFO  02:39:04,853 - Variable: bt with type  5 declared  on the line 17
INFO  02:39:04,853 - Variable: nula with type  1 declared  on the line 18
INFO  02:39:04,858 - Array operator used  on the line 21
INFO  02:39:04,858 - Array operator used  on the line 22
INFO  02:39:04,858 - programWithMethods on the line 3
INFO  02:39:04,859 - ===================================
INFO  02:39:04,868 - Parsing finished succesfully!
